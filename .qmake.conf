
# This file contains the global definitions and the bootstrapping
# for the whole project build process
#
# Only modify if you are 100% sure what you are doing


# All source files are in the SOURCE tree,
# the intermediate build files are in the BUILD tree
# and the final product goes to the DEPLOY tree
#
# Since it is highly advisable to use a shadow build configuration,
# we should not mess with the build directory at all, thats qmake's domain.

PROJECT_ROOT = $$PWD
BUILD_PWD    = $$shadowed($$PWD)
DEPLOY_PATH   = $$BUILD_PWD/bin

CONFIG_DIR      = $$PROJECT_ROOT/config

# --- Functions required for easier bootstrapping ---
# Determines the path to the requested config file and returns it for use with
# include(...)
# Should the config file not exist, an error is produced and the build is
# aborted.
#
# Example:
# include($$getConfigFile(config_foo.pri))

defineReplace(getConfigFile){

    FILE = $$CONFIG_DIR/$$1
    !exists($$FILE): error(Missing config file $$FILE)
    return($$FILE)
}

# --- Using C++ 11 ---

CONFIG *= c++11

# --- Preparing for build mode specific paths ---

# USE_BUILD_MODE_PATHS triggers the usage of specific build paths depending on whether
# you are building in debug or release mode
# This is enabled per default for windows builds and disabled per default for
# unix builds.
# You can override this default setting by either defining the variable
# beforehand or passing an own value to qmake

# Uncomment one of the following for a quick override
# USE_BUILD_MODE_PATHS = true
# USE_BUILD_MODE_PATHS = false

!defined(USE_BUILD_MODE_PATHS){
    win32:USE_BUILD_MODE_PATHS = true
    else: USE_BUILD_MODE_PATHS = false
}

# --- Bootstrapping utility functions and paths that are required globally---

include($$CONFIG_DIR/config_functions.pri)
include($$CONFIG_DIR/config_paths.pri)
